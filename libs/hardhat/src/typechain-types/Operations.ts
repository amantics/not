/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface OperationsInterface extends utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "createOperation(string,string,uint256,string[],string)": FunctionFragment;
    "decimals()": FunctionFragment;
    "deleteById(uint256,string[],string)": FunctionFragment;
    "getOperationById(uint256)": FunctionFragment;
    "getOperationByReference(string)": FunctionFragment;
    "getOperations()": FunctionFragment;
    "getOperationsByReferences(string[])": FunctionFragment;
    "getOperationsCount()": FunctionFragment;
    "getOperationsForOwner(address)": FunctionFragment;
    "getOperationsForOwnerId(uint256)": FunctionFragment;
    "ids(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nextOperationId()": FunctionFragment;
    "operationIds(uint256)": FunctionFragment;
    "operationIdsListByCreator(address,uint256)": FunctionFragment;
    "operationIdsListByCreatorId(uint256,uint256)": FunctionFragment;
    "operations(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "referenceToId(string)": FunctionFragment;
    "replaceBalanceAddress(address,address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferToManyFrom(address,address[],uint256[])": FunctionFragment;
    "updateById(uint256,string,string[],string,bool,address,address[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "createOperation"
      | "decimals"
      | "deleteById"
      | "getOperationById"
      | "getOperationByReference"
      | "getOperations"
      | "getOperationsByReferences"
      | "getOperationsCount"
      | "getOperationsForOwner"
      | "getOperationsForOwnerId"
      | "ids"
      | "name"
      | "nextOperationId"
      | "operationIds"
      | "operationIdsListByCreator"
      | "operationIdsListByCreatorId"
      | "operations"
      | "owner"
      | "referenceToId"
      | "replaceBalanceAddress"
      | "symbol"
      | "transfer"
      | "transferFrom"
      | "transferToManyFrom"
      | "updateById"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOperation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deleteById",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperationById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperationByReference",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperationsByReferences",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperationsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperationsForOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperationsForOwnerId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ids",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextOperationId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operationIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "operationIdsListByCreator",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "operationIdsListByCreatorId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "operations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referenceToId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceBalanceAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToManyFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateById",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOperationById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperationByReference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperationsByReferences",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperationsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperationsForOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperationsForOwnerId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextOperationId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationIdsListByCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationIdsListByCreatorId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operations", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referenceToId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceBalanceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToManyFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateById", data: BytesLike): Result;

  events: {
    "Notify(string,string,string)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Notify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface NotifyEventObject {
  primaryKey: string;
  operationReference: string;
  payload: string;
}
export type NotifyEvent = TypedEvent<
  [string, string, string],
  NotifyEventObject
>;

export type NotifyEventFilter = TypedEventFilter<NotifyEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokens: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Operations extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OperationsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      tokenOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    createOperation(
      _reference: PromiseOrValue<string>,
      _payload: PromiseOrValue<string>,
      _ownerId: PromiseOrValue<BigNumberish>,
      _eventPrimaryKeys: PromiseOrValue<string>[],
      _eventPayload: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deleteById(
      _id: PromiseOrValue<BigNumberish>,
      _eventPrimaryKeys: PromiseOrValue<string>[],
      _eventPayload: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOperationById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getOperationByReference(
      _reference: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getOperations(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    getOperationsByReferences(
      _references: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getOperationsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOperationsForOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getOperationsForOwnerId(
      _ownerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, boolean, BigNumber] & {
        id: BigNumber;
        creator: string;
        operationReference: string;
        exists: boolean;
        creatorId: BigNumber;
      }
    >;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextOperationId(overrides?: CallOverrides): Promise<[BigNumber]>;

    operationIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    operationIdsListByCreator(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    operationIdsListByCreatorId(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    operations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        operationReference: string;
        payload: string;
        creator: string;
        exists: boolean;
        index: BigNumber;
        indexToCreator: BigNumber;
        indexToCreatorId: BigNumber;
        creatorId: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    referenceToId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean, BigNumber] & {
        operationReference: string;
        id: BigNumber;
        creator: string;
        exists: boolean;
        creatorId: BigNumber;
      }
    >;

    replaceBalanceAddress(
      _oldAddress: PromiseOrValue<string>,
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    transfer(
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferToManyFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>[],
      tokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateById(
      _id: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<string>,
      _eventPrimaryKeys: PromiseOrValue<string>[],
      _eventPayload: PromiseOrValue<string>,
      _transferMoney: PromiseOrValue<boolean>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    tokenOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createOperation(
    _reference: PromiseOrValue<string>,
    _payload: PromiseOrValue<string>,
    _ownerId: PromiseOrValue<BigNumberish>,
    _eventPrimaryKeys: PromiseOrValue<string>[],
    _eventPayload: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deleteById(
    _id: PromiseOrValue<BigNumberish>,
    _eventPrimaryKeys: PromiseOrValue<string>[],
    _eventPayload: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOperationById(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getOperationByReference(
    _reference: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getOperations(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

  getOperationsByReferences(
    _references: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getOperationsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getOperationsForOwner(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getOperationsForOwnerId(
    _ownerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  ids(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, boolean, BigNumber] & {
      id: BigNumber;
      creator: string;
      operationReference: string;
      exists: boolean;
      creatorId: BigNumber;
    }
  >;

  name(overrides?: CallOverrides): Promise<string>;

  nextOperationId(overrides?: CallOverrides): Promise<BigNumber>;

  operationIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  operationIdsListByCreator(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  operationIdsListByCreatorId(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  operations(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      operationReference: string;
      payload: string;
      creator: string;
      exists: boolean;
      index: BigNumber;
      indexToCreator: BigNumber;
      indexToCreatorId: BigNumber;
      creatorId: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  referenceToId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, boolean, BigNumber] & {
      operationReference: string;
      id: BigNumber;
      creator: string;
      exists: boolean;
      creatorId: BigNumber;
    }
  >;

  replaceBalanceAddress(
    _oldAddress: PromiseOrValue<string>,
    _newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  transfer(
    to: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferToManyFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>[],
    tokens: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateById(
    _id: PromiseOrValue<BigNumberish>,
    _payload: PromiseOrValue<string>,
    _eventPrimaryKeys: PromiseOrValue<string>[],
    _eventPayload: PromiseOrValue<string>,
    _transferMoney: PromiseOrValue<boolean>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>[],
    _tokens: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      tokenOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createOperation(
      _reference: PromiseOrValue<string>,
      _payload: PromiseOrValue<string>,
      _ownerId: PromiseOrValue<BigNumberish>,
      _eventPrimaryKeys: PromiseOrValue<string>[],
      _eventPayload: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deleteById(
      _id: PromiseOrValue<BigNumberish>,
      _eventPrimaryKeys: PromiseOrValue<string>[],
      _eventPayload: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getOperationById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getOperationByReference(
      _reference: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getOperations(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    getOperationsByReferences(
      _references: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getOperationsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getOperationsForOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getOperationsForOwnerId(
      _ownerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, boolean, BigNumber] & {
        id: BigNumber;
        creator: string;
        operationReference: string;
        exists: boolean;
        creatorId: BigNumber;
      }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    nextOperationId(overrides?: CallOverrides): Promise<BigNumber>;

    operationIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operationIdsListByCreator(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operationIdsListByCreatorId(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        operationReference: string;
        payload: string;
        creator: string;
        exists: boolean;
        index: BigNumber;
        indexToCreator: BigNumber;
        indexToCreatorId: BigNumber;
        creatorId: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    referenceToId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean, BigNumber] & {
        operationReference: string;
        id: BigNumber;
        creator: string;
        exists: boolean;
        creatorId: BigNumber;
      }
    >;

    replaceBalanceAddress(
      _oldAddress: PromiseOrValue<string>,
      _newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    transfer(
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferToManyFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>[],
      tokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateById(
      _id: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<string>,
      _eventPrimaryKeys: PromiseOrValue<string>[],
      _eventPayload: PromiseOrValue<string>,
      _transferMoney: PromiseOrValue<boolean>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Notify(string,string,string)"(
      primaryKey?: PromiseOrValue<string> | null,
      operationReference?: PromiseOrValue<string> | null,
      payload?: null
    ): NotifyEventFilter;
    Notify(
      primaryKey?: PromiseOrValue<string> | null,
      operationReference?: PromiseOrValue<string> | null,
      payload?: null
    ): NotifyEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokens?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokens?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    balanceOf(
      tokenOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createOperation(
      _reference: PromiseOrValue<string>,
      _payload: PromiseOrValue<string>,
      _ownerId: PromiseOrValue<BigNumberish>,
      _eventPrimaryKeys: PromiseOrValue<string>[],
      _eventPayload: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deleteById(
      _id: PromiseOrValue<BigNumberish>,
      _eventPrimaryKeys: PromiseOrValue<string>[],
      _eventPayload: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOperationById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperationByReference(
      _reference: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperations(overrides?: CallOverrides): Promise<BigNumber>;

    getOperationsByReferences(
      _references: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperationsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getOperationsForOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperationsForOwnerId(
      _ownerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextOperationId(overrides?: CallOverrides): Promise<BigNumber>;

    operationIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operationIdsListByCreator(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operationIdsListByCreatorId(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    referenceToId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    replaceBalanceAddress(
      _oldAddress: PromiseOrValue<string>,
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferToManyFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>[],
      tokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateById(
      _id: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<string>,
      _eventPrimaryKeys: PromiseOrValue<string>[],
      _eventPayload: PromiseOrValue<string>,
      _transferMoney: PromiseOrValue<boolean>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      tokenOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createOperation(
      _reference: PromiseOrValue<string>,
      _payload: PromiseOrValue<string>,
      _ownerId: PromiseOrValue<BigNumberish>,
      _eventPrimaryKeys: PromiseOrValue<string>[],
      _eventPayload: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleteById(
      _id: PromiseOrValue<BigNumberish>,
      _eventPrimaryKeys: PromiseOrValue<string>[],
      _eventPayload: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOperationById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperationByReference(
      _reference: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOperationsByReferences(
      _references: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperationsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperationsForOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperationsForOwnerId(
      _ownerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOperationId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operationIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operationIdsListByCreator(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operationIdsListByCreatorId(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referenceToId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    replaceBalanceAddress(
      _oldAddress: PromiseOrValue<string>,
      _newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferToManyFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>[],
      tokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateById(
      _id: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<string>,
      _eventPrimaryKeys: PromiseOrValue<string>[],
      _eventPayload: PromiseOrValue<string>,
      _transferMoney: PromiseOrValue<boolean>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
